services:
  users-service:
    build:
      context: ./users-service
      dockerfile: dockerfile
    container_name: users-service
    environment:
      - PORT=8080
      - HOST_URL=localhost
      - ACCESS_TOKEN_SECRET=super_secret_key_for_user_service
      - REFRESH_TOKEN_SECRET=super_secret_rkey_for_user_service
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0&retryWrites=true&w=majority&readPreference=secondaryPreferred
    depends_on:
      - mongo-init-replica
    ports:
      - "8080:8080"

  shows-service:
    build:
      context: ./shows-service
      dockerfile: dockerfile
    container_name: shows-service
    environment:
      - PORT=8080
      - ACCESS_TOKEN_SECRET=super_secret_key_for_user_service
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0&retryWrites=true&w=majority&readPreference=secondaryPreferred
    depends_on:
      - mongo-init-replica
    ports:
      - "8081:8080"

  mongo1:
    image: mongo:7.0.2
    container_name: mongo-node1
    ports:
      - "27017:27017"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb

  mongo2:
    image: mongo:7.0.2
    container_name: mongo-node2
    ports:
      - "27018:27018"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    volumes:
      - mongo_data2:/data/db
      - mongo_config2:/data/configdb

  mongo3:
    image: mongo:7.0.2
    container_name: mongo-node3
    ports:
      - "27019:27019"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    volumes:
      - mongo_data3:/data/db
      - mongo_config3:/data/configdb

  mongo-init-replica:
    image: mongo:7.0.2
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    entrypoint: >
      bash -c "
      echo 'Waiting for MongoDB nodes...';
      until mongosh --host mongo1 --port 27017 --eval 'db.adminCommand(\"ping\")'; do sleep 2; done;
      until mongosh --host mongo2 --port 27018 --eval 'db.adminCommand(\"ping\")'; do sleep 2; done;
      until mongosh --host mongo3 --port 27019 --eval 'db.adminCommand(\"ping\")'; do sleep 2; done;

      echo 'Initiating replica set...';
      mongosh --host mongo1 --port 27017 --eval \"
        try {
          rs.initiate({
            _id: 'rs0',
            members: [
              { _id: 0, host: 'host.docker.internal:27017', priority: 1 },
              { _id: 1, host: 'host.docker.internal:27018', priority: 0.5 },
              { _id: 2, host: 'host.docker.internal:27019', priority: 0.5 }
            ]
          })
        } catch(e) { print(e) }
      \"
      "
    volumes:
      - mongo_init_data:/data/db
      - mongo_init_config:/data/configdb

volumes:
  mongo_data:
  mongo_config:
  mongo_data2:
  mongo_config2:
  mongo_data3:
  mongo_config3:
  mongo_init_data:
  mongo_init_config:
